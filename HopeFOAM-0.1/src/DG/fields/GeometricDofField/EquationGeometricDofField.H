/*--------------------------------------------------------------------------------------
|     __  ______  ____  ______ |                                                       |
|    / / / / __ \/ __ \/ ____/ | HopeFOAM: High Order Parallel Extensible CFD Software |
|   / /_/ / / / / /_/ / __/    |                                                       |
|  / __  / /_/ / ____/ /___    |                                                       |
| /_/ /_/\____/_/   /_____/    | Copyright(c) 2017-2017 The Exercise Group, AMS, China.|
|                              |                                                       |
----------------------------------------------------------------------------------------

License
    This file is part of HopeFOAM, which is developed by Exercise Group, Innovation 
    Institute for Defence Science and Technology, the Academy of Military Science (AMS), China.

    HopeFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation, either version 3 of the License, or (at your
    option) any later version.

    HopeFOAM is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with HopeFOAM.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::EquationGeometricDofField

Description
    This File is auto generated by python module cogapp

SourceFiles
    
    
Author
    Zhen Xiao (452576504@qq.com)
\*---------------------------------------------------------------------------*/

#ifndef EquationGeometricDofField_H
#define EquationGeometricDofField_H

#include "Equation.H"
#include <memory>
#include "tmp.H"
#include "GeometricDofField.H"

namespace Foam
{
namespace dg
{

template<class Type>
class EquationGeometricDofField
    : public Equation<Type>
{
public:
    enum {
        GeometricDofFieldLabel = 0
    };

    EquationGeometricDofField(const GeometricDofField<Type, dgPatchField, dgGeoMesh> & tvf)
    :
        isTmp(false)
    {
        this->vf = &tvf;
        this->lduMatrixPtr = make_shared<dgLduMatrix<Type>>(this->vf->mesh(), GeometricDofFieldLabel);
    };

    EquationGeometricDofField(const tmp<GeometricDofField<Type, dgPatchField, dgGeoMesh>> & tvf)
    :
        isTmp(true)
    {
        this->vf = tvf.ptr();
        this->lduMatrixPtr = make_shared<dgLduMatrix<Type>>(this->vf->mesh(), GeometricDofFieldLabel);
    };

    ~EquationGeometricDofField(){
        if(this->isTmp){
            delete this->vf;
        }
    }

    virtual void calculateCell(dgTree<physicalCellElement>::leafIterator iter)
    {
        const physicalCellElement& ele = iter()->value();
        label nDof = ele.nDof();
        label dofStart = ele.dofStart();

        // prepare lduMatrix data
        this->lduMatrixPtr->diagCoeff() = 0.0;
        Field<Type>& source = this->lduMatrixPtr->source_;
        Field<Type>& b = this->lduMatrixPtr->b_;
        const Field<Type>& internal = this->vf->primitiveField();

        //- init value
        for(int i=0; i<nDof; ++i, ++dofStart){
            source[i] = -internal[dofStart];
            b[i] = pTraits<Type>::zero;
        }
        this->lduMatrixPtr->sourceSize_ = nDof;
    }

    virtual dimensionSet getDimensionSet() {
        return this->vf->dimensions();
    }

    const GeometricDofField<Type, dgPatchField, dgGeoMesh>*
        getPSI()
    {
        return NULL;
    }

    virtual label getMatrixLabel() {
        return GeometricDofFieldLabel;
    }

    const GeometricDofField<Type, dgPatchField, dgGeoMesh>* vf;
    const bool isTmp;
};

}
}
#endif //EquationGeometricDofField_H
